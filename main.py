"""
This is the entry point for a FastAPI app that defines a REST API.

It is essentially a router that is expected to be deployed within an external HTTP server.

Much of the API behaviour and capabilities is inferred by FastAPI from
type hints, docstrings, and other annotation in this module.

The implied and automated behaviour includes for example:
- Request validation
- An automatically generated SwaggerUI hosted on a sister port to the API
- Autogenerated sensible error responses when exceptions are raised (such as request validation)

You can run it locally using the fastAPI CLI with: ```fastapi dev main.py```, and
the CLI:
- tells you which URLs it is serving on
- reloads if you edit the source code
- shows you request logs

"""

from fastapi import FastAPI, File
import uvicorn
from typing import Annotated

from models.transaction import Transaction
from models.report import Report
from handlers.add_transactions import add_transactions
from handlers.make_report import make_report


description = """
Tax Accounts API helps you generate a tax submission. ðŸš€

You can:

* **Upload transactions from a CSV file**
* **Then get a summary net-revenue report**
"""
app = FastAPI(title="Tax Accounts API", description=description)


@app.post("/transactions", status_code=201, name="Upload transactions from CSV file")
def handle_transactions(data: Annotated[bytes, File()]) -> list[Transaction]:
    """
    The file you choose for '''data''' in the request body should contain lines like
    these:

    ```
    2020-07-01, Expense, 18.77, Fuel
    2020-07-04, Income, 40.00, 347 Woodrow
    ```
    """
    return add_transactions(data)


@app.get("/report", name="Get a summary report")
def handle_get_report() -> Report:
    return make_report()


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
